name: TestCICD

on:
  push:
    branches: [ main, master ]  # Adjust to your main branch name

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    # Configure Docker to use gcloud authentication
    - name: Configure Docker for authentication
      run: gcloud auth configure-docker
      
    # Build and push Auth Service
    - name: Build and Push Auth Service
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/auth-service:${{ github.sha }} ./AuthService
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/auth-service:${{ github.sha }}
        
    # Repeat for each service in your architecture
    - name: Build and Push User Service
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:${{ github.sha }} ./UserService
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:${{ github.sha }}
        
    - name: Build and Push Post Service
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/post-service:${{ github.sha }} ./PostService
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/post-service:${{ github.sha }}
        
    - name: Build and Push Chat Service
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/chat-service:${{ github.sha }} ./ChatService
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/chat-service:${{ github.sha }}
        
    - name: Build and Push Noti Service
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/noti-service:${{ github.sha }} ./NotiService
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/noti-service:${{ github.sha }}

    # Create an updated docker-compose file on VM
    - name: Generate deployment docker-compose.yml
      run: |
        cat > docker-compose.deploy.yml << 'EOL'
        version: '3'
        services:
          zookeeper:
            image: confluentinc/cp-zookeeper:latest
            restart: always
            environment:
              ZOOKEEPER_CLIENT_PORT: 2181
          kafka:
            image: confluentinc/cp-kafka:latest
            restart: always
            depends_on:
              - zookeeper
            ports:
              - "9092:9092"
            environment:
              KAFKA_BROKER_ID: 1
              KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
              KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
              KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
              KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          redis:
            image: redis:latest
            container_name: redis
            ports:
              - "6379:6379"
            volumes:
              - redis-data:/data
            command: redis-server --save 60 1 --loglevel warning
            restart: always
          rabbitmq:
            image: rabbitmq:3-management
            container_name: rabbitmq
            ports:
              - "5672:5672"
              - "15672:15672"
            environment:
              RABBITMQ_DEFAULT_USER: guest
              RABBITMQ_DEFAULT_PASS: guest
          auth-service:
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/auth-service:${{ github.sha }}
            container_name: AuthService
            ports:
              - "8081:8081"
            depends_on:
              - rabbitmq
            environment:
              - SPRING_RABBITMQ_HOST=rabbitmq
              - SPRING_REDIS_HOST=redis
              - SPRING_REDIS_PORT=6379
          user-service:
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:${{ github.sha }}
            container_name: UserService
            ports:
              - "8085:8085"
            depends_on:
              - rabbitmq
            environment:
              - SPRING_RABBITMQ_HOST=rabbitmq 
              - SPRING_REDIS_HOST=redis
              - SPRING_REDIS_PORT=6379
          noti-service:
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/noti-service:${{ github.sha }}
            container_name: NotiService
            ports:
              - "8084:8084"
            depends_on:
              - rabbitmq
            environment:
              - SPRING_RABBITMQ_HOST=rabbitmq
              - SPRING_REDIS_HOST=redis
              - SPRING_REDIS_PORT=6379
          chat-service:
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/chat-service:${{ github.sha }}
            container_name: ChatService
            ports:
              - "8082:8082"
          post-service:
            image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/post-service:${{ github.sha }}
            container_name: PostService
            ports:
              - "8083:8083"
        volumes:
          redis-data:
        EOL
      
    # Deploy to VM - store VM instance name in GCP_VM_INSTANCE secret
    - name: Deploy to VM
      run: |
        # Save docker-compose file to VM
        gcloud compute scp docker-compose.deploy.yml ${{ secrets.GCP_VM_INSTANCE }}:~/docker-compose.yml --zone=${{ secrets.GCP_ZONE }}
        
        # Run docker-compose on VM
        gcloud compute ssh ${{ secrets.GCP_VM_INSTANCE }} --zone=${{ secrets.GCP_ZONE }} -- '
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose
          sudo gcloud auth configure-docker
          sudo docker-compose down
          sudo docker-compose up -d
        '
