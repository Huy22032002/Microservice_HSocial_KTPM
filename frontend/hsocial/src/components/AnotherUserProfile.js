import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";

import { fetchUserDetail } from "../api/userApi";
import {
  accpeptFriend,
  getListFriend,
  getListPending,
  sendFriendRequest,
  removeFriend,
} from "../api/friendApi";

import Header from "./header";
import styles from "../styles/UserHome.module.css";
import { useSelector } from "react-redux";
const AnotherUserProfile = () => {
  const { userId } = useParams();
  const [userDetails, setUserDetails] = useState(null);
  const [friends, setFriends] = useState([]);
  const [posts, setPosts] = useState([]);

  const userIdRedux = useSelector((state) => state.user.userId);
  //state h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n
  const [showCancelPopup, setShowCancelPopup] = useState(false);

  //status pending, accepted, none
  const [friendStatus, setFriendStatus] = useState("");

  const fetchDetails = async () => {
    console.log("user id: ", userId);

    const userData = await fetchUserDetail(userId);
    setUserDetails(userData);
    console.log("User detail:", userData);
  };
  const fetchFriends = async () => {
    const lstFriend = await getListFriend(userId);
    if (lstFriend) {
      const acceptedFriends = lstFriend
        .filter((f) => f.friendStatus === "ACCEPTED")
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      setFriends(acceptedFriends);
    }
  };
  const checkFriendStatus = async () => {
    console.log("friends cua another user: ", friends);
    //lay danh sach ban be cua minh
    const myListFriend = await getListFriend(userIdRedux);
    console.log("my list friend: ", myListFriend, " ", typeof myListFriend);

    const isFriend = myListFriend.find((friend) => friend.friendId == userId);
    if (isFriend) {
      setFriendStatus("B·∫°n b√®");
      return;
    }
    //tr∆∞·ªùng h·ª£p ai ƒë√≥ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n, l·∫•y danh sach pending c·ªßa m√¨nh
    const myListPending = await getListPending(userIdRedux);
    console.log("my liss pending", myListPending);
    if (myListPending != null) {
      const rs = myListPending.find((friend) => friend.friendId == userId);
      if (rs) {
        setFriendStatus("Ch·∫•p nh·∫≠n");
        return;
      }
    }
    //ko phai pending, accpect thi l√† k·∫øt b·∫°n
    setFriendStatus("K·∫øt b·∫°n");
  };

  const handleRemoveFriend = async () => {
    if (friendStatus === "B·∫°n b√®") {
      const rs = await removeFriend(userIdRedux, userId);
      if (rs) {
        setFriendStatus("K·∫øt b·∫°n");
      }
    }
  };
  const handleButton = async () => {
    if (friendStatus === "K·∫øt b·∫°n") {
      await sendFriendRequest(userIdRedux, userId);
      alert("G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!");
      setFriendStatus("ƒê√£ g·ª≠i l·ªùi m·ªùi");
    } else if (friendStatus === "Ch·∫•p nh·∫≠n") {
      await accpeptFriend(userIdRedux, userId);
      setFriendStatus("B·∫°n b√®");
    } else if (friendStatus === "ƒê√£ g·ª≠i l·ªùi m·ªùi") {
      //show popup c√≥ n√∫t h·ªßy l·ªùi m·ªùi
      console.log("M·ªü popup c√≥ n√∫t h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n");
      setShowCancelPopup(true);
      //x√≥a status pending b√™n friendID ƒë·ªÉ h·ªßy
      setFriendStatus("K·∫øt b·∫°n");
    } else if (friendStatus === "B·∫°n b√®") {
      console.log("M·ªü popup h·ªßy k·∫øt b·∫°n");
      setShowCancelPopup(true);
    }
  };
  useEffect(() => {
    if (userIdRedux && userId) {
      setFriends([]);
      fetchDetails();
      fetchFriends();
      checkFriendStatus();
    }
  }, [userId]);

  return (
    <>
      <Header />
      <div className={styles.profileContainer}>
        <div className={styles.profileHeader}>
          {userDetails && (
            <div className={styles.profileCard}>
              <img
                src={userDetails.avatar}
                alt="Avatar"
                className={styles.avatar}
              />
              <div>
                <h2>{userDetails.fullname}</h2>
                <p>{userDetails.address}</p>
                <p>
                  {userDetails.gender === true ? "Nam" : "N·ªØ"} |{" "}
                  {userDetails.age} tu·ªïi
                </p>
              </div>
            </div>
          )}
          <div className={styles.buttonContainer}>
            <button onClick={handleButton}>{friendStatus}</button>
            {showCancelPopup && (
              <div className={styles.popupUnderButton}>
                <div className={styles.popupContent}>
                  {friendStatus === "B·∫°n b√®" ? (
                    <p>B·∫°n c√≥ mu·ªën h·ªßy k·∫øt b·∫°n?</p>
                  ) : (
                    <p>B·∫°n c√≥ mu·ªën h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n?</p>
                  )}
                  <div className={styles.popupButtons}>
                    <button
                      className={styles.confirmBtn}
                      onClick={() => {
                        handleRemoveFriend();
                        console.log("ƒê√£ x√°c nh·∫≠n h·ªßy.");
                        setShowCancelPopup(false);
                        setFriendStatus("K·∫øt b·∫°n");
                      }}
                    >
                      X√°c nh·∫≠n
                    </button>
                    <button
                      className={styles.cancelBtn}
                      onClick={() => setShowCancelPopup(false)}
                    >
                      H·ªßy
                    </button>
                  </div>
                </div>
              </div>
            )}
            <button>Nh·∫Øn tin</button>
          </div>
        </div>

        <div className={styles.profileBody}>
          {/* Danh s√°ch b·∫°n b√® */}
          <div className={styles.friendsSection}>
            <h3>üë• Danh s√°ch b·∫°n b√®</h3>
            <ul className={styles.friendList}>
              {Array.isArray(friends) && friends.length > 0 ? (
                friends.map((friend) => (
                  <li key={friend.friendId} className={styles.friendItem}>
                    <div className={styles.friendInfo}>
                      <p>
                        <strong>ID:</strong> {friend.friendId}
                      </p>
                      <span>
                        Ng√†y k·∫øt b·∫°n:{" "}
                        {new Date(friend.createdAt).toLocaleDateString("vi-VN")}
                      </span>
                    </div>

                    <div className={styles.friendActions}>
                      <button className={styles.profileBtn}>
                        üë§ Xem h·ªì s∆°
                      </button>
                      <button className={styles.chatBtn}>üí¨ Nh·∫Øn tin</button>
                    </div>
                  </li>
                ))
              ) : (
                <p>Ch∆∞a c√≥ b·∫°n b√® n√†o.</p>
              )}
            </ul>
          </div>

          {/* Danh s√°ch b√†i vi·∫øt */}
          <div className={styles.postsSection}>
            <h3>üìù B√†i vi·∫øt c·ªßa b·∫°n</h3>
            {posts.length === 0 ? (
              <p>Ch∆∞a c√≥ b√†i vi·∫øt n√†o!</p>
            ) : (
              <div className={styles.postsList}>
                {posts.map((post) => (
                  <div key={post._id} className={styles.postItem}>
                    <h4>{post.title}</h4>
                    <p>{post.content}</p>
                    <p>
                      <small>{post.date}</small>
                    </p>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default AnotherUserProfile;
